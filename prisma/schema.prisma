generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String
  value       Int
  isEquippable Boolean
  maxStack    Int
  rarity      Rarity
  stats       ItemStat[] @relation("ItemStats") // 아이템과 스탯의 관계 설정
  equippedByCharacterId Int? 
  inventoryOfCharacterId Int? 
  equippedBy Character? @relation("EquippedItems", fields: [equippedByCharacterId], references: [id])
  inventoryOf Character? @relation("InventoryItems", fields: [inventoryOfCharacterId], references: [id])
}

model ItemStat {
  id            Int      @id @default(autoincrement())
  healthBonus   Int?     // 체력 보너스
  attackBonus   Int?     // 공격력 보너스
  defenseBonus  Int?     // 방어력 보너스
  critChanceBonus Float? // 치명타 확률 보너스
  critMultiplierBonus Float? // 치명타 배율 보너스
  evasionBonus  Float?   // 회피율 보너스
  accuracyBonus Float?   // 명중율 보너스
  itemId        Int
  item          Item      @relation("ItemStats", fields: [itemId], references: [id]) // 아이템과 스탯 연결
}

model User {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  password          String
  nickname          String
  role              String
  selectedCharacterId Int?   
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  characters        Character[]  @relation("UserCharacters") 
}

model Character {
  id                Int       @id @default(autoincrement())
  name              String
  health            Int
  attackPower       Int
  defense           Int
  critChance        Float
  critMultiplier    Float
  evasion           Float
  accuracy          Float
  expGainRate       Float
  goldGainRate      Float
  ownerId           Int
  owner             User      @relation("UserCharacters", fields: [ownerId], references: [id])
  equippedItems     Item[]    @relation("EquippedItems")
  inventoryItems    Item[]    @relation("InventoryItems")
}


enum Role {
  ADMIN
  USER
  SUSPENDED
  DELETED 
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}
